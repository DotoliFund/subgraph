// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class DecreaseInvestorToken extends ethereum.Event {
  get params(): DecreaseInvestorToken__Params {
    return new DecreaseInvestorToken__Params(this);
  }
}

export class DecreaseInvestorToken__Params {
  _event: DecreaseInvestorToken;

  constructor(event: DecreaseInvestorToken) {
    this._event = event;
  }

  get investor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get investor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class IncreaseInvestorToken extends ethereum.Event {
  get params(): IncreaseInvestorToken__Params {
    return new IncreaseInvestorToken__Params(this);
  }
}

export class IncreaseInvestorToken__Params {
  _event: IncreaseInvestorToken;

  constructor(event: IncreaseInvestorToken) {
    this._event = event;
  }

  get investor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Initialize extends ethereum.Event {
  get params(): Initialize__Params {
    return new Initialize__Params(this);
  }
}

export class Initialize__Params {
  _event: Initialize;

  constructor(event: Initialize) {
    this._event = event;
  }

  get _manager(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Swap extends ethereum.Event {
  get params(): Swap__Params {
    return new Swap__Params(this);
  }
}

export class Swap__Params {
  _event: Swap;

  constructor(event: Swap) {
    this._event = event;
  }

  get manager(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenIn(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenOut(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amountIn(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amountOut(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get investor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class XXXFund2__getInvestorTokensResultValue0Struct extends ethereum.Tuple {
  get tokenAddress(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }
}

export class XXXFund2__getRewardTokensResultValue0Struct extends ethereum.Tuple {
  get tokenAddress(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }
}

export class XXXFund2 extends ethereum.SmartContract {
  static bind(address: Address): XXXFund2 {
    return new XXXFund2("XXXFund2", address);
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getInvestorTokenAmount(investor: Address, token: Address): BigInt {
    let result = super.call(
      "getInvestorTokenAmount",
      "getInvestorTokenAmount(address,address):(uint256)",
      [ethereum.Value.fromAddress(investor), ethereum.Value.fromAddress(token)]
    );

    return result[0].toBigInt();
  }

  try_getInvestorTokenAmount(
    investor: Address,
    token: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getInvestorTokenAmount",
      "getInvestorTokenAmount(address,address):(uint256)",
      [ethereum.Value.fromAddress(investor), ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getInvestorTokenCount(investor: Address): BigInt {
    let result = super.call(
      "getInvestorTokenCount",
      "getInvestorTokenCount(address):(uint256)",
      [ethereum.Value.fromAddress(investor)]
    );

    return result[0].toBigInt();
  }

  try_getInvestorTokenCount(investor: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getInvestorTokenCount",
      "getInvestorTokenCount(address):(uint256)",
      [ethereum.Value.fromAddress(investor)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getInvestorTokens(
    investor: Address
  ): Array<XXXFund2__getInvestorTokensResultValue0Struct> {
    let result = super.call(
      "getInvestorTokens",
      "getInvestorTokens(address):((address,uint256)[])",
      [ethereum.Value.fromAddress(investor)]
    );

    return result[0].toTupleArray<
      XXXFund2__getInvestorTokensResultValue0Struct
    >();
  }

  try_getInvestorTokens(
    investor: Address
  ): ethereum.CallResult<Array<XXXFund2__getInvestorTokensResultValue0Struct>> {
    let result = super.tryCall(
      "getInvestorTokens",
      "getInvestorTokens(address):((address,uint256)[])",
      [ethereum.Value.fromAddress(investor)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<XXXFund2__getInvestorTokensResultValue0Struct>()
    );
  }

  getRewardTokens(): Array<XXXFund2__getRewardTokensResultValue0Struct> {
    let result = super.call(
      "getRewardTokens",
      "getRewardTokens():((address,uint256)[])",
      []
    );

    return result[0].toTupleArray<
      XXXFund2__getRewardTokensResultValue0Struct
    >();
  }

  try_getRewardTokens(): ethereum.CallResult<
    Array<XXXFund2__getRewardTokensResultValue0Struct>
  > {
    let result = super.tryCall(
      "getRewardTokens",
      "getRewardTokens():((address,uint256)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<XXXFund2__getRewardTokensResultValue0Struct>()
    );
  }

  manager(): Address {
    let result = super.call("manager", "manager():(address)", []);

    return result[0].toAddress();
  }

  try_manager(): ethereum.CallResult<Address> {
    let result = super.tryCall("manager", "manager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _manager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class SwapCall extends ethereum.Call {
  get inputs(): SwapCall__Inputs {
    return new SwapCall__Inputs(this);
  }

  get outputs(): SwapCall__Outputs {
    return new SwapCall__Outputs(this);
  }
}

export class SwapCall__Inputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get trades(): Array<SwapCallTradesStruct> {
    return this._call.inputValues[0].value.toTupleArray<SwapCallTradesStruct>();
  }
}

export class SwapCall__Outputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }
}

export class SwapCallTradesStruct extends ethereum.Tuple {
  get tradeType(): i32 {
    return this[0].toI32();
  }

  get swapType(): i32 {
    return this[1].toI32();
  }

  get investor(): Address {
    return this[2].toAddress();
  }

  get tokenIn(): Address {
    return this[3].toAddress();
  }

  get tokenOut(): Address {
    return this[4].toAddress();
  }

  get recipient(): Address {
    return this[5].toAddress();
  }

  get fee(): i32 {
    return this[6].toI32();
  }

  get amountIn(): BigInt {
    return this[7].toBigInt();
  }

  get amountOut(): BigInt {
    return this[8].toBigInt();
  }

  get amountInMaximum(): BigInt {
    return this[9].toBigInt();
  }

  get amountOutMinimum(): BigInt {
    return this[10].toBigInt();
  }

  get sqrtPriceLimitX96(): BigInt {
    return this[11].toBigInt();
  }

  get path(): Bytes {
    return this[12].toBytes();
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
