// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class FundCreated extends ethereum.Event {
  get params(): FundCreated__Params {
    return new FundCreated__Params(this);
  }
}

export class FundCreated__Params {
  _event: FundCreated;

  constructor(event: FundCreated) {
    this._event = event;
  }

  get param0(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get param1(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnerChanged extends ethereum.Event {
  get params(): OwnerChanged__Params {
    return new OwnerChanged__Params(this);
  }
}

export class OwnerChanged__Params {
  _event: OwnerChanged;

  constructor(event: OwnerChanged) {
    this._event = event;
  }

  get oldOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class XXXFactory extends ethereum.SmartContract {
  static bind(address: Address): XXXFactory {
    return new XXXFactory("XXXFactory", address);
  }

  createFund(): Address {
    let result = super.call("createFund", "createFund():(address)", []);

    return result[0].toAddress();
  }

  try_createFund(): ethereum.CallResult<Address> {
    let result = super.tryCall("createFund", "createFund():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getFundByManager(param0: Address): Address {
    let result = super.call(
      "getFundByManager",
      "getFundByManager(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toAddress();
  }

  try_getFundByManager(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getFundByManager",
      "getFundByManager(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getManagerFee(): BigInt {
    let result = super.call("getManagerFee", "getManagerFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getManagerFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getManagerFee",
      "getManagerFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSwapRouterAddress(): Address {
    let result = super.call(
      "getSwapRouterAddress",
      "getSwapRouterAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getSwapRouterAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getSwapRouterAddress",
      "getSwapRouterAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getWhiteListTokens(): Array<Address> {
    let result = super.call(
      "getWhiteListTokens",
      "getWhiteListTokens():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getWhiteListTokens(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getWhiteListTokens",
      "getWhiteListTokens():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  isSubscribed(investor: Address, fund: Address): boolean {
    let result = super.call(
      "isSubscribed",
      "isSubscribed(address,address):(bool)",
      [ethereum.Value.fromAddress(investor), ethereum.Value.fromAddress(fund)]
    );

    return result[0].toBoolean();
  }

  try_isSubscribed(
    investor: Address,
    fund: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isSubscribed",
      "isSubscribed(address,address):(bool)",
      [ethereum.Value.fromAddress(investor), ethereum.Value.fromAddress(fund)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isWhiteListToken(_token: Address): boolean {
    let result = super.call(
      "isWhiteListToken",
      "isWhiteListToken(address):(bool)",
      [ethereum.Value.fromAddress(_token)]
    );

    return result[0].toBoolean();
  }

  try_isWhiteListToken(_token: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isWhiteListToken",
      "isWhiteListToken(address):(bool)",
      [ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  subscribedFunds(): Array<Address> {
    let result = super.call(
      "subscribedFunds",
      "subscribedFunds():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_subscribedFunds(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "subscribedFunds",
      "subscribedFunds():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddWhiteListTokenCall extends ethereum.Call {
  get inputs(): AddWhiteListTokenCall__Inputs {
    return new AddWhiteListTokenCall__Inputs(this);
  }

  get outputs(): AddWhiteListTokenCall__Outputs {
    return new AddWhiteListTokenCall__Outputs(this);
  }
}

export class AddWhiteListTokenCall__Inputs {
  _call: AddWhiteListTokenCall;

  constructor(call: AddWhiteListTokenCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddWhiteListTokenCall__Outputs {
  _call: AddWhiteListTokenCall;

  constructor(call: AddWhiteListTokenCall) {
    this._call = call;
  }
}

export class CreateFundCall extends ethereum.Call {
  get inputs(): CreateFundCall__Inputs {
    return new CreateFundCall__Inputs(this);
  }

  get outputs(): CreateFundCall__Outputs {
    return new CreateFundCall__Outputs(this);
  }
}

export class CreateFundCall__Inputs {
  _call: CreateFundCall;

  constructor(call: CreateFundCall) {
    this._call = call;
  }
}

export class CreateFundCall__Outputs {
  _call: CreateFundCall;

  constructor(call: CreateFundCall) {
    this._call = call;
  }

  get fund(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class RemoveWhiteListTokenCall extends ethereum.Call {
  get inputs(): RemoveWhiteListTokenCall__Inputs {
    return new RemoveWhiteListTokenCall__Inputs(this);
  }

  get outputs(): RemoveWhiteListTokenCall__Outputs {
    return new RemoveWhiteListTokenCall__Outputs(this);
  }
}

export class RemoveWhiteListTokenCall__Inputs {
  _call: RemoveWhiteListTokenCall;

  constructor(call: RemoveWhiteListTokenCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveWhiteListTokenCall__Outputs {
  _call: RemoveWhiteListTokenCall;

  constructor(call: RemoveWhiteListTokenCall) {
    this._call = call;
  }
}

export class SetManagerFeeCall extends ethereum.Call {
  get inputs(): SetManagerFeeCall__Inputs {
    return new SetManagerFeeCall__Inputs(this);
  }

  get outputs(): SetManagerFeeCall__Outputs {
    return new SetManagerFeeCall__Outputs(this);
  }
}

export class SetManagerFeeCall__Inputs {
  _call: SetManagerFeeCall;

  constructor(call: SetManagerFeeCall) {
    this._call = call;
  }

  get _managerFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetManagerFeeCall__Outputs {
  _call: SetManagerFeeCall;

  constructor(call: SetManagerFeeCall) {
    this._call = call;
  }
}

export class SetOwnerCall extends ethereum.Call {
  get inputs(): SetOwnerCall__Inputs {
    return new SetOwnerCall__Inputs(this);
  }

  get outputs(): SetOwnerCall__Outputs {
    return new SetOwnerCall__Outputs(this);
  }
}

export class SetOwnerCall__Inputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOwnerCall__Outputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }
}

export class SetSwapRouterAddressCall extends ethereum.Call {
  get inputs(): SetSwapRouterAddressCall__Inputs {
    return new SetSwapRouterAddressCall__Inputs(this);
  }

  get outputs(): SetSwapRouterAddressCall__Outputs {
    return new SetSwapRouterAddressCall__Outputs(this);
  }
}

export class SetSwapRouterAddressCall__Inputs {
  _call: SetSwapRouterAddressCall;

  constructor(call: SetSwapRouterAddressCall) {
    this._call = call;
  }

  get _swapRouterAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetSwapRouterAddressCall__Outputs {
  _call: SetSwapRouterAddressCall;

  constructor(call: SetSwapRouterAddressCall) {
    this._call = call;
  }
}

export class SubscribeCall extends ethereum.Call {
  get inputs(): SubscribeCall__Inputs {
    return new SubscribeCall__Inputs(this);
  }

  get outputs(): SubscribeCall__Outputs {
    return new SubscribeCall__Outputs(this);
  }
}

export class SubscribeCall__Inputs {
  _call: SubscribeCall;

  constructor(call: SubscribeCall) {
    this._call = call;
  }

  get fund(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SubscribeCall__Outputs {
  _call: SubscribeCall;

  constructor(call: SubscribeCall) {
    this._call = call;
  }
}
