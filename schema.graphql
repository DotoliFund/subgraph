# DotoliSetting
type Setting @entity {
  # DotoliSetting address
  id: Bytes!
  # manager fee ratio
  managerFee: BigInt!
  # minimum ETH value of token + ETH pool to be whitelist token
  minPoolAmount: BigInt!
  # owner of the DotoliSetting contract
  owner: Bytes!
}

# DotoliInfo
type Info @entity {
  # DotoliInfo address
  id: Bytes!
  # amount of funds created
  fundCount: BigInt!
  # amount of investor
  investorCount: BigInt!
  # all fund's ETH value of the token held by the contract
  totalCurrentETH: BigDecimal!
  # all fund's USD value of the token held by the contract
  totalCurrentUSD: BigDecimal!
  # owner of the DotoliInfo contract
  owner: Bytes!
}

type WhiteListToken @entity {
  # token address
  id: Bytes!
  # token address
  address: Bytes!
  # token decimals
  decimals: BigInt!
  # token symbol
  symbol: String!
  # creation
  updatedTimestamp: BigInt!
  # true : added, false : removed
  isWhiteListToken: Boolean!
}

type Fund @entity {
  # fund id
  id: ID!
  # fund id
  fundId: String!
  # creation
  createdAtTimestamp: BigInt!
  # update
  updatedAtTimestamp: BigInt!
  # manager address
  manager: Bytes!
  # investorCount
  investorCount: BigInt!
  # ETH value of the token held by the contract
  currentETH: BigDecimal!
  # USD value of the token held by the contract
  currentUSD: BigDecimal!
  # address of tokens held by the contract
  currentTokens: [Bytes!]!
  # symbol of tokens held by the contract
  currentTokensSymbols: [String!]!
  # decimals of tokens held by the contract
  currentTokensDecimals: [BigInt!]!
  # amount of tokens held by the contract
  currentTokensAmount: [BigDecimal!]!
  # fee tokens address
  feeTokens: [Bytes!]!
  # fee tokens symbol
  feeSymbols: [String!]!
  # fee tokens amount
  feeTokensAmount: [BigDecimal!]!
}

type Investor @entity {
  # format: <fund id>-<investor address>
  id: ID!
  # creation
  createdAtTimestamp: BigInt!
  # update
  updatedAtTimestamp: BigInt!
  # fund id
  fundId: String!
  # investor address
  investor: Bytes!
  # investor is manager
  isManager: Boolean!
  # snapshot count
  snapshotCount: BigInt!
  # ETH value of principal
  principalETH: BigDecimal!
  # USD value of principal
  principalUSD: BigDecimal!
  # ETH value of the token held by the contract
  currentETH: BigDecimal!
  # USD value of the token held by the contract
  currentUSD: BigDecimal!
  # address of tokens held by the contract
  currentTokens: [Bytes!]!
  # symbol of tokens held by the contract
  currentTokensSymbols: [String!]!
  # decimals of tokens held by the contract
  currentTokensDecimals: [BigInt!]!
  # amount of tokens held by the contract
  currentTokensAmount: [BigDecimal!]!
  # profit ETH
  profitETH: BigDecimal!
  # profit USD
  profitUSD: BigDecimal!
  # profit ratio
  profitRatio: BigDecimal!
}

type Subscribe @entity {
  # <fund id>-<investor address>
  id: ID!
  # hash
  hash: Bytes!
  # time of txn
  timestamp: BigInt!
  # fund id
  fundId: String!
  # investor address
  investor: Bytes!
}

type WithdrawFee @entity {
  # transaction hash
  id: ID!
  # time of txn
  timestamp: BigInt!
  # fund id
  fundId: String!
  # pointer to Manager 
  manager: Bytes!
  # withdraw token address
  token: Bytes!
  # token symbol
  tokenSymbol: String!
  # amount of token withdraw
  amount: BigDecimal!
  # derived amount based on available prices of tokens
  amountETH: BigDecimal!
  # derived amount based on available prices of tokens
  amountUSD: BigDecimal!
}

type Deposit @entity {
  # transaction hash
  id: ID!
  # time of txn
  timestamp: BigInt!
  # fund id
  fundId: String!
  # pointer to Manager 
  manager: Bytes!
  # pointer to investor
  investor: Bytes!
  # withdraw token address
  token: Bytes!
  # token symbol
  tokenSymbol: String!
  # amount of token withdraw
  amount: BigDecimal!
  # derived amount based on available prices of tokens
  amountETH: BigDecimal!
  # derived amount based on available prices of tokens
  amountUSD: BigDecimal!
}

type Withdraw @entity {
  # transaction hash
  id: ID!
  # time of txn
  timestamp: BigInt!
  # fund id
  fundId: String!
  # pointer to Manager 
  manager: Bytes!
  # pointer to investor
  investor: Bytes!
  # withdraw token address
  token: Bytes!
  # token symbol
  tokenSymbol: String!
  # amount of token withdraw
  amount: BigDecimal!
  # derived amount based on available prices of tokens
  amountETH: BigDecimal!
  # derived amount based on available prices of tokens
  amountUSD: BigDecimal!
}

type Swap @entity {
  # transaction hash
  id: ID!
  # timestamp of txn
  timestamp: BigInt!
  # fund id
  fundId: String!
  # pointer to Manager 
  manager: Bytes!
  # pointer to investor
  investor: Bytes!
  # swap token0 address
  token0: String!
  # swap token1 address
  token1: String!
  # token0 symbol
  token0Symbol: String!
  # token1 symbol
  token1Symbol: String!
  # amount of token0 swapped
  amount0: BigDecimal!
  # amount of token1 swapped
  amount1: BigDecimal!
  # derived amount based on available prices of tokens
  amountETH: BigDecimal!
  # derived amount based on available prices of tokens
  amountUSD: BigDecimal!
}

type MintNewPosition @entity {
  # transaction hash
  id: ID!
  # timestamp of txn
  timestamp: BigInt!
  # fund id
  fundId: String!
  # pointer to Manager 
  manager: Bytes!
  # pointer to investor
  investor: Bytes!
  # mint token0 address
  token0: String!
  # mint token1 address
  token1: String!
  # token0 symbol
  token0Symbol: String!
  # token1 symbol
  token1Symbol: String!
  # amount of token0 minted
  amount0: BigDecimal!
  # amount of token1 minted
  amount1: BigDecimal!
  # derived amount based on available prices of tokens
  amountETH: BigDecimal!
  # derived amount based on available prices of tokens
  amountUSD: BigDecimal!
}

type IncreaseLiquidity @entity {
  # transaction hash
  id: ID!
  # timestamp of txn
  timestamp: BigInt!
  # fund id
  fundId: String!
  # pointer to Manager 
  manager: Bytes!
  # pointer to investor
  investor: Bytes!
  # increase liquidity token0 address
  token0: String!
  # increase liquidity token1 address
  token1: String!
  # token0 symbol
  token0Symbol: String!
  # token1 symbol
  token1Symbol: String!
  # amount of token0 increased
  amount0: BigDecimal!
  # amount of token1 increased
  amount1: BigDecimal!
  # derived amount based on available prices of tokens
  amountETH: BigDecimal!
  # derived amount based on available prices of tokens
  amountUSD: BigDecimal!
}

type CollectPositionFee @entity {
  # transaction hash
  id: ID!
  # timestamp of txn
  timestamp: BigInt!
  # fund id
  fundId: String!
  # pointer to Manager 
  manager: Bytes!
  # pointer to investor
  investor: Bytes!
  # collect fee token0 address
  token0: String!
  # collect fee token1 address
  token1: String!
  # token0 symbol
  token0Symbol: String!
  # token1 symbol
  token1Symbol: String!
  # amount of token0 collected
  amount0: BigDecimal!
  # amount of token1 collected
  amount1: BigDecimal!
  # derived amount based on available prices of tokens
  amountETH: BigDecimal!
  # derived amount based on available prices of tokens
  amountUSD: BigDecimal!
}

type DecreaseLiquidity @entity {
  # transaction hash
  id: ID!
  # timestamp of txn
  timestamp: BigInt!
  # fund id
  fundId: String!
  # pointer to Manager 
  manager: Bytes!
  # pointer to investor
  investor: Bytes!
  # decrease liquidity token0 address
  token0: String!
  # decrease liquidity token1 address
  token1: String!
  # token0 symbol
  token0Symbol: String!
  # token1 symbol
  token1Symbol: String!
  # amount of token0 decreased
  amount0: BigDecimal!
  # amount of token1 decreased
  amount1: BigDecimal!
  # derived amount based on available prices of tokens
  amountETH: BigDecimal!
  # derived amount based on available prices of tokens
  amountUSD: BigDecimal!
}

# daily stats tracker for DotoliInfo
type InfoSnapshot @entity {
  # txn hash
  id: ID!
  # date
  date: Int!
  # amount of funds created
  fundCount: BigInt!
  # amount of investor
  investorCount: BigInt!
  # all fund's ETH value of the token held by the contract
  totalCurrentETH: BigDecimal!
  # all fund's USD value of the token held by the contract
  totalCurrentUSD: BigDecimal!
}

# daily stats tracker for fund
type FundSnapshot @entity {
  # format: <fund id>-<timestamp>
  id: ID!
  # timestamp
  timestamp: BigInt!
  # fund id
  fundId: String!
  # pointer to Manager 
  manager: Bytes!
  # investorCount
  investorCount: BigInt!
  # ETH value of the token held by the contract
  currentETH: BigDecimal!
  # USD value of the token held by the contract
  currentUSD: BigDecimal!
  # address of tokens held by the contract
  currentTokens: [Bytes!]!
  # symbol of tokens held by the contract
  currentTokensSymbols: [String!]!
  # decimals of tokens held by the contract
  currentTokensDecimals: [BigInt!]!
  # amount of tokens held by the contract
  currentTokensAmount: [BigDecimal!]!
  # ETH amount of tokens held by the contract
  currentTokensAmountETH: [BigDecimal!]!
  # USD amount of tokens held by the contract
  currentTokensAmountUSD: [BigDecimal!]!
}

# daily stats tracker for investor
type InvestorSnapshot @entity {
  # format: <fund id>-<investor address>-<snapshot count>
  id: ID!
  # timestamp
  timestamp: BigInt!
  # fund id
  fundId: String!
  # pointer to Manager 
  manager: Bytes!
  # pointer to investor
  investor: Bytes!
  # ETH value of principal
  principalETH: BigDecimal!
  # USD value of principal
  principalUSD: BigDecimal!
  # address of tokens held by the contract + pool
  tokens: [Bytes!]!
  # symbol of tokens held by the contract + pool
  tokensSymbols: [String!]!
  # decimals of tokens held by the contract + pool
  tokensDecimals: [BigInt!]!
  # ETH amount of tokens held by the contract + pool
  tokensAmountETH: [BigDecimal!]!
  # USD amount of tokens held by the contract + pool
  tokensAmountUSD: [BigDecimal!]!
  # ETH value of the token held by the contract
  currentETH: BigDecimal!
  # USD value of the token held by the contract
  currentUSD: BigDecimal!
  # ETH value of the token held by the pool
  poolETH: BigDecimal!
  # USD value of the token held by the pool
  poolUSD: BigDecimal!
}