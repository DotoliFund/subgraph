type Factory @entity {
  # factory address
  id: ID!
  # timestamp
  timestamp: BigInt!
  # amount of funds created
  fundCount: BigInt!
  # total volume all time in derived USD
  totalVolumeUSD: BigDecimal!
  # total volume all time in derived ETH
  totalVolumeETH: BigDecimal!
  # current owner of the factory
  owner: ID!
}

type Fund @entity {
  # fund address
  id: ID!
  # creation
  createdAtTimestamp: BigInt!
  # block fund was created at
  createdAtBlockNumber: BigInt!
  # manager address
  manager: Bytes!
  # principalETH
  principalETH: BigDecimal!
  # principalUSD
  principalUSD: BigDecimal!
  # profit
  profit: BigInt!
  # all time fees collected derived USD
  collectedFeesUSD: BigDecimal!
  # volumeETH
  volumeETH: BigDecimal!
  # volumeETH
  volumeUSD: BigDecimal!
  # investorCount
  investorCount: BigInt!
  # snapshots of fund data
  fundSnapshot: [FundDaySnapshot!]! @derivedFrom(field: "fund")
  # derived fields
  subscribe: [Subscribe!]! @derivedFrom(field: "fund")
  deposits: [Deposit!]! @derivedFrom(field: "fund")
  withdraws: [Withdraw!]! @derivedFrom(field: "fund")
  swaps: [Swap!]! @derivedFrom(field: "fund")
}

type Investor @entity {
  # format: <fund address>-<investor address>
  id: ID!
  # creation
  createdAtTimestamp: BigInt!
  # block investor was created at
  createdAtBlockNumber: BigInt!
  # fund address
  fund: Bytes!
  # investor address
  investor: Bytes!
  # principalETH
  principalETH: BigDecimal!
  # principalUSD
  principalUSD: BigDecimal!
  # profit
  profit: BigInt!
  # all time fees collected derived USD
  collectedFeesUSD: BigDecimal!
  # volumeETH
  volumeETH: BigDecimal!
  # volumeETH
  volumeUSD: BigDecimal!
  # investorCount
  investorCount: BigInt!
  # snapshots of investor data
  investorSnapshot: [InvestorDaySnapshot!]!
  # transactions
  deposits: [Deposit!]!
  withdraws: [Withdraw!]!
  swaps: [Swap!]!
}

type Reward @entity {
  # fund address
  id: ID!
  # creation
  createdAtTimestamp: BigInt!
  # block investor was created at
  createdAtBlockNumber: BigInt!
  # fund address
  fund: Bytes!
  # principalETH
  principalETH: BigDecimal!
  # principalUSD
  principalUSD: BigDecimal!
  # volumeETH
  volumeETH: BigDecimal!
  # volumeETH
  volumeUSD: BigDecimal!
  # snapshots of reward data
  rewardSnapshot: [RewardDaySnapshot!]!
  # transactions
  deposits: [DepositReward!]!
  withdraws: [WithdrawReward!]!
}

type FundToken @entity {
  # format: <fund address>-<token address>
  id: ID!
  # timestamp txn was confirmed
  timestamp: BigInt!
  # token belongs to fund
  fund: String!
  # token address
  address: String!
  # token amount
  amount: BigDecimal!
  # pointer to fundDaySnapshot
  fundDaySnapshot: FundDaySnapshot!
  # token symbol
  symbol: String!
  # token name
  name: String!
  # token decimals
  decimals: BigInt!
  # derived price in ETH
  derivedETH: BigDecimal!
}

type InvestorToken @entity {
  # format: <investor address>-<token address>
  id: ID!
  # timestamp txn was confirmed
  timestamp: BigInt!
  # token belongs to investor
  investor: String!
  # token address
  address: String!
  # token amount
  amount: BigDecimal!
  # pointer to investorDaySnapshot
  investorDaySnapshot: InvestorDaySnapshot!
  # token symbol
  symbol: String!
  # token name
  name: String!
  # token decimals
  decimals: BigInt!
  # derived price in ETH
  derivedETH: BigDecimal!
}

type RewardToken @entity {
  # format: <fund address>-<token address>
  id: ID!
  # timestamp txn was confirmed
  timestamp: BigInt!
  # token belongs to manager
  manager: String!
  # token address
  address: String!
  # token amount
  amount: BigDecimal!
  # pointer to RewardDaySnapshot
  rewardDaySnapshot: RewardDaySnapshot!
  # token symbol
  symbol: String!
  # token name
  name: String!
  # token decimals
  decimals: BigInt!
  # derived price in ETH
  derivedETH: BigDecimal!
}

type Transaction @entity {
  # txn hash
  id: ID!
  # block txn was included in
  blockNumber: BigInt!
  # timestamp txn was confirmed
  timestamp: BigInt!
  # gas used during txn execution
  gasUsed: BigInt!
  gasPrice: BigInt!
  # derived values
  subscribes: [Subscribe!]! @derivedFrom(field: "transaction")
  deposits: [Deposit!]! @derivedFrom(field: "transaction")
  withdraws: [Withdraw!]! @derivedFrom(field: "transaction")
  depositReward: [DepositReward!]! @derivedFrom(field: "transaction")
  withdrawReward: [WithdrawReward!]! @derivedFrom(field: "transaction")
}

type Subscribe @entity {
  # transaction hash + "#" + index in mints Transaction array
  id: ID!
  # which txn the mint was included in
  transaction: Transaction!
  # time of txn
  timestamp: BigInt!
  # pointer to fund 
  fund: Fund!
  # the sender address
  sender: Bytes
  # txn origin
  origin: Bytes! # the EOA that initiated the txn
  # order within the txn
  logIndex: BigInt
}

type Deposit @entity {
  # transaction hash + "#" + index in mints Transaction array
  id: ID!
  # which txn the mint was included in
  transaction: Transaction!
  # time of txn
  timestamp: BigInt!
  # pointer to fund 
  fund: Fund!
  # the investor address
  investor: Bytes
  # txn origin
  origin: Bytes! # the EOA that initiated the txn
  # deposit token address
  token: String!
  # amount of token deposit
  amount: BigDecimal!
  # derived amount based on available prices of tokens
  amountUSD: BigDecimal
  # order within the txn
  logIndex: BigInt
  # gas used during txn execution
  gasUsed: BigInt!
  gasPrice: BigInt!
}

type Withdraw @entity {
  # transaction hash + "#" + index in mints Transaction array
  id: ID!
  # which txn the mint was included in
  transaction: Transaction!
  # time of txn
  timestamp: BigInt!
  # pointer to fund 
  fund: Fund!
  # the investor address
  investor: Bytes
  # txn origin
  origin: Bytes! # the EOA that initiated the txn
  # withdraw token address
  token: String!
  # amount of token withdraw
  amount: BigDecimal!
  # derived amount based on available prices of tokens
  amountUSD: BigDecimal
}

type Swap @entity {
  # transaction hash + "#" + index in swaps Transaction array
  id: ID!
  # which txn the mint was included in
  transaction: Transaction!
  # timestamp of transaction
  timestamp: BigInt!
  # fund swap occured within
  fund: Fund!
  # manager of fund = sender
  manager: Bytes!
  # investor of fund
  investor: Bytes!
  # txn origin
  origin: Bytes! # the EOA that initiated the txn
  # swap token0 address
  token0: String!
  # swap token1 address
  token1: String!
  # amount of token0 swapped
  amount0: BigDecimal!
  # amount of token1 swapped
  amount1: BigDecimal!
  # derived info
  amountUSD: BigDecimal!
  # index within the txn
  logIndex: BigInt
}

type DepositReward @entity {
  # transaction hash + "#" + index in mints Transaction array
  id: ID!
  # which txn the mint was included in
  transaction: Transaction!
  # time of txn
  timestamp: BigInt!
  # pointer to fund 
  fund: Fund!
  # the investor address
  investor: Bytes
  # txn origin
  origin: Bytes! # the EOA that initiated the txn
  # withdraw token address
  token: String!
  # amount of token withdraw
  amount: BigDecimal!
  # derived amount based on available prices of tokens
  amountUSD: BigDecimal
}

type WithdrawReward @entity {
  # transaction hash + "#" + index in mints Transaction array
  id: ID!
  # which txn the mint was included in
  transaction: Transaction!
  # time of txn
  timestamp: BigInt!
  # pointer to fund
  fund: Fund!
  # the investor address
  investor: Bytes
  # txn origin
  origin: Bytes! # the EOA that initiated the txn
  # withdraw token address
  token: String!
  # amount of token withdraw
  amount: BigDecimal!
  # derived amount based on available prices of tokens
  amountUSD: BigDecimal
}

# daily stats tracker for fund
type FundDaySnapshot @entity {
  # format: <fund address>-<timestamp>
  id: ID!
  # timestamp rounded to current day by dividing by 86400
  date: Int!
  # pointer to fund
  fund: Fund!
  # tokens
  tokens: [FundToken!]! @derivedFrom(field: "fundDaySnapshot")
  # volume in USD
  volumeUSD: BigDecimal!
}

# daily stats tracker for investor
type InvestorDaySnapshot @entity {
  # format: <investor address>-<timestamp>
  id: ID!
  # timestamp rounded to current day by dividing by 86400
  date: Int!
  # pointer to investor
  investor: Investor!
  # tokens
  tokens: [InvestorToken!]! @derivedFrom(field: "investorDaySnapshot")
  # volume in USD
  volumeUSD: BigDecimal!
}

# daily stats tracker for investor
type RewardDaySnapshot @entity {
  # format: <investor address>-<timestamp>
  id: ID!
  # timestamp rounded to current day by dividing by 86400
  date: Int!
  # pointer to fund
  fund: Fund!
  # tokens
  tokens: [RewardToken!]! @derivedFrom(field: "rewardDaySnapshot")
  # volume in USD
  volumeUSD: BigDecimal!
}